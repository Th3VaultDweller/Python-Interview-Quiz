# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'QuizAppGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets

import quiz

# вопросы и ответы будут дублироваться в консоли
from quiz import random_question


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(800, 600)
        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout.setObjectName("verticalLayout")

        self.ChangeLanguageButton = QtWidgets.QToolButton(Dialog)
        self.ChangeLanguageButton.setAcceptDrops(False)
        self.ChangeLanguageButton.setObjectName("ChangeLanguageButton")
        self.verticalLayout.addWidget(self.ChangeLanguageButton)

        self.Question = QtWidgets.QLabel(Dialog)
        self.Question.setMouseTracking(False)
        self.Question.setAutoFillBackground(True)
        self.Question.setScaledContents(True)
        self.Question.setWordWrap(True)
        self.Question.setObjectName("Question")
        self.verticalLayout.addWidget(self.Question)

        self.Answer = QtWidgets.QLabel(Dialog)
        self.Answer.setAutoFillBackground(True)
        self.Answer.setScaledContents(False)
        self.Answer.setWordWrap(True)
        self.Answer.setOpenExternalLinks(True)
        self.Answer.setObjectName("Answer")
        self.verticalLayout.addWidget(self.Answer)

        self.ShowAnswerButton = QtWidgets.QPushButton(
            Dialog, clicked=lambda: self.ShowAnswer()
        )
        self.ShowAnswerButton.setObjectName("ShowAnswerButton")
        self.verticalLayout.addWidget(self.ShowAnswerButton)

        self.ShowRandomQuestionButton = QtWidgets.QPushButton(
            Dialog, clicked=lambda: self.ShowRandomQuestion()
        )
        self.ShowRandomQuestionButton.setObjectName("ShowRandomQuestionButton")
        self.verticalLayout.addWidget(self.ShowRandomQuestionButton)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.ChangeLanguageButton.setText(_translate("Dialog", "Язык приложения"))
        self.Question.setText(_translate("Dialog", "Вопрос"))
        self.Answer.setText(_translate("Dialog", "Ответ"))
        self.ShowAnswerButton.setText(_translate("Dialog", "Показать ответ"))
        self.ShowRandomQuestionButton.setText(_translate("Dialog", "Случайный вопрос"))

    def ShowRandomQuestion(self):
        """Показать случайный вопрос по нажатию кнопки"""
        self.Question.setText(random_question)

    def ShowAnswer(self):
        if "Что такое Middleware?" in random_question:
            self.Answer.setText(
                "Middleware — это промежуточное программное обеспечение, которое располагается между приложением и сетевыми службами. \nОсновная цель middleware — обработка запросов и ответов между клиентом и сервером."
            )
        if (
            "Какая разница в быстродействии между Django и Flask и почему?"
            in random_question
        ):
            self.Answer.setText(
                "Django чуть медленнее Flask из-за своей более высокой функциональности и накладных расходов. Однако на практике разница в скорости работы между ними незначительна для большинства веб-приложений.\nFlask может быть немного быстрее при обработке простых запросов, но Django лучше масштабируется при увеличении нагрузки благодаря встроенным инструментам кэширования и оптимизации.\nКроме того, производительность в большей степени зависит от архитектуры и качества кода конкретного приложения."
            )
        if "Что такое протоколы?" in random_question:
            self.Answer.setText(
                "Протоколы — это соглашения, которые определяют интерфейс класса и поведение его объектов. Протоколы задаются с помощью специальных методов, таких как str, len и другие. Они позволяют классам работать с различными функциями и операторами языка.\nРеализуя протоколы можно интегрировать классы в языке и делать их поведение естественным и интуитивным. В Python есть протоколы для чисел, итераторов, контекстных менеджеров, атрибутов и других областей. Встроенные и сторонние библиотеки полагаются на стандартные протоколы."
            )
        if (
            "Можно ли объявлять функцию внутри другой функции? Где она будет видна?"
            in random_question
        ):
            self.Answer.setText(
                "Да, функции можно объявлять внутри других функций. Такая вложенная функция будет видна и доступна для вызова только внутри родительской функции, в которой она определена. Это называется замыканием и позволяет ограничить область видимости вложенной функции, чтобы она не загрязняла глобальное пространство имен.\nВложенные функции могут быть полезны, когда нужно реализовать вспомогательную логику, связанную только с работой родительской функции."
            )
        if "Что такое await?" in random_question:
            self.Answer.setText(
                "Await используется для работы с асинхронным кодом и корутинами. Его можно применять только внутри асинхронной функции, определенной с async def.\nAwait позволяет избежать блокировки основного потока программы во время ожидания результатов asynс-функций. Await делает возможным использование асинхронного кода в синхронном стиле последовательно.\nПри вызове await передается управление обратно событийному циклу. Выполнение функции приостанавливается до завершения await-выражения.\nЧаще всего await используется при вызове асинхронных функций и методов — для ожидания результата. Await также может применяться к объектам asyncio.Future и asyncio.Task для ожидания их завершения.\nЕсли await вызывается для корутины, то выполнение текущей корутины приостанавливается до завершения той, которая вызвана."
            )
        if "Что такое async?" in random_question:
            self.Answer.setText(
                "Async — это синтаксис для создания асинхронного кода на основе корутин. Асинхронное программирование позволяет выполнять операции вне основного потока выполнения программы. С помощью async def определяются асинхронные функции-корутины. Такие функции не выполняются сразу, а возвращают объект-корутину. Для запуска корутин используется await. Это передает управление обратно в событийный цикл до завершения корутины.\nAsyncio — стандартный модуль для работы с асинхронным кодом. Он содержит событийный цикл и различные классы. Асинхронный код усложняет логику программы, но позволяет добиться большей производительности за счет неблокирующих вызовов.\nКорутины полезны для операций ввода/вывода, ожидания сети, обращения к БД — там, где нужно не блокировать основной поток."
            )


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
